trigger:
  branches:
    include:
    - main
  paths:
    include:
    - cicdbots/echo-bot

stages:
- stage: Build
  jobs:
  - job: EchoBotBuild
    displayName: EchoBot Continous Integration
    pool:
      vmImage: 'ubuntu-20.04'
    continueOnError: false
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: cicdbots/echo-bot/echo-bot.csproj

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: cicdbots/echo-bot/echo-bot.csproj
        arguments: '--configuration release'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        workingDirectory: cicdbots/echo-bot
        arguments: '--configuration release --output "$(Build.ArtifactStagingDirectory)" --no-restore'
        zipAfterPublish: false

    - task: ArchiveFiles@2
      displayName: 'Archive EchoBot app'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/drop/echo-bot.zip'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish EchoBot app Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/drop'
        archiveFilePatterns: '*.zip'
        artifactName: 'drop-$(Build.BuildId)'


- stage: Deploy
  dependsOn:
  - Build
  jobs:
  - deployment: EchoBotDeploy
    displayName: EchoBot Continous Deployment
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'echobot-prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              appType: webApp
              ConnectionType: AzureRM
              ConnectedServiceName: 'ARMServiceConnection'
              ResourceGroupName: 'rg-cicd-bots'
              WebAppName: 'Devopstestbot'
              DeploymentType: runFromZip
              enableCustomDeployment: true
              packageForLinux: '$(Pipeline.Workspace)/drop-$(Build.BuildId)/echo-bot.zip'
              deployToSlotOrASE: true
              SlotName: 'production'

